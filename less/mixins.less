// Clearfix
.clearfix {
	*zoom: 1;
	&:after,
	&:before {
		content: "";
		display: table;
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Messages
.buildMessage(@className, @messageColor: @gray, @messageBorder: @borderWidth) {
	.@{className} {
		@startColor: lighten(@messageColor, 20%);
		@endColor:   lighten(@messageColor, 10%);
		#css3 > #gradient > .vertical(@startColor, @endColor);
		border: @messageBorder solid darken(@endColor, 20%);
		#css3 > .radius(@borderRadius);
		#css3 > .boxShadow(inset 0 0 1px, @white);
		color: darken(@messageColor, 30%);
		margin-bottom: 20px;
		padding: 10px 10px 8px;
		> * {
			color: darken(@messageColor, 30%);
			margin-bottom: 10px;
		}
		a {
			color: @blue;
		}
		h2,
		h2 a {
			font-size: 16px;
			line-height: 100%;
		}
	}
}
.buildSecondaryMessage(@className, @messageColor: #aaa, @messageBorder: @borderWidth) {
	.message.@{className} {
		@startColor: lighten(@messageColor, 20%);
		@endColor:   lighten(@messageColor, 10%);
		#css3 > #gradient > .vertical(@startColor, @endColor);
		border-color: darken(@endColor, 20%);
		border-width: @messageBorder;
		color: darken(@messageColor, 30%);
		* {
			color: darken(@messageColor, 30%);
		}
	}
}

// Buttons
.buttonColor(@color: @white) when (lightness(@color) >= 80%) {
	color: @grayDarker;
}
.buttonColor(@color: @white) when (lightness(@color) < 80%) {
	color: @white;
}
.buildButton(@className: button, @startColor: @white, @endColor: darken(@white, 12.5%), @radius: @borderRadius) {
	.@{className} {
		#css3 > #gradient > .vertical(@startColor, @endColor);
		border: @borderWidth solid darken(@endColor, 10%);
		#css3 > .radius(@radius);
		#css3 > .boxShadow(inset 0 1px 0 0, lighten(@startColor, 10%));
		#forms > .boxSizing(inherit);
		.buttonColor(@startColor);
		cursor: pointer;
		display: inline-block;
		font-family: @defaultFontStack;
		font-size: @baseFontSize;
		height: 32px;
		line-height: 34px;
		margin-right: 6px;
		padding: 0 15px 2px;
		position: relative;
		text-shadow: 0 1px 0 @white;
	}
	button.@{className},
	input.@{className} {
		top: 1px;
	}
	.@{className}:hover {
		background: @endColor !important;
		transition: all 0.3s linear;
		-moz-transition: all 0.3s linear;
		-webkit-transition: all 0.3s linear;
	}
	a.@{className},
	a.@{className}:active,
	a.@{className}:focus,
	a.@{className}:hover,
	a.@{className}:visited {
		.buttonColor(@startColor);
		height: 34px;
		padding-bottom: 0;
	}
	.button-group .@{className} {
		#css3 > .radius(0px);
		margin-right: -5px;
	}
	.button-group .@{className}:first-child {
		#css3 > .radius(@radius 0 0 @radius);
	}
	.button-group .@{className}:last-child {
		#css3 > .radius(0 @radius @radius 0);
	}
}
.buildAdditionalButton(@className: button, @startColor: @white, @endColor: darken(@white, 12.5%), @radius: @borderRadius) {
	.button.@{className} {
		#css3 > #gradient > .vertical(@startColor, @endColor);
		border-color: darken(@endColor, 10%);
		#css3 > .boxShadow(inset 0 1px 0 0, lighten(@startColor, 10%));
		.buttonColor(@startColor);
		text-shadow: 0 1px 0 darken(@endColor, 10%);
	}
	.button.@{className}:hover {
		background: @endColor !important;
		transition: all 0.3s linear;
		-moz-transition: all 0.3s linear;
		-webkit-transition: all 0.3s linear;
	}
	a.button.@{className},
	a.button.@{className}:active,
	a.button.@{className}:focus,
	a.button.@{className}:hover,
	a.button.@{className}:visited {
		.buttonColor(@startColor);
	}
}

// Forms
#forms {
	.boxSizing(@boxModel) {
		box-sizing: @boxModel;
		-moz-box-sizing: @boxModel;
		-webkit-box-sizing: @boxModel;
	}
	.placeholder(@color: @grayLighter) {
		&:-moz-placeholder {
			color: @color;
		}
			&:-ms-input-placeholder {
			color: @color;
		}
		&::-webkit-input-placeholder {
			color: @color;
		}
	}
}

// CSS3
#css3 {
	// Gradients
	#gradient {
		.vertical(@startColor: #555, @endColor: #333) {
			background-color: mix(@startColor, @endColor, 60%);
			background-image: linear-gradient(to bottom, @startColor, @endColor);
			background-image: -moz-linear-gradient(top, @startColor, @endColor);
			background-image: -o-linear-gradient(top, @startColor, @endColor);
			background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), to(@endColor));
			background-image: -webkit-linear-gradient(top, @startColor, @endColor);
			background-repeat: repeat-x;
			filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor)));
		}
	}
	// Border Radius
	.radius(@radius) {
		border-radius: @radius;
		-moz-border-radius: @radius;
		-webkit-border-radius: @radius;
	}
	// Box Shadow
	.boxShadow(@style, @color) {
		box-shadow: @style @color;
		-moz-box-shadow: @style @color;
		-webkit-box-shadow: @style @color;
	}
}


// Grid
.buildGrid(@fluidGridColumnWidth, @fluidGridGutterWidth) {
	
	.spanX(@index) when (@index > 0) {
		(~".span@{index}") { .span(@index); }
		.spanX(@index - 1);
	}
	.spanX(0) {}
	
	.offsetX(@index) when (@index > 0) {
		(~'.offset@{index}') { .offset(@index); }
		(~'.offset@{index}:first-child') { .offsetFirstChild(@index); }
		.offsetX(@index - 1);
	}
	.offsetX (0) {}
	
	.offset(@columns) {
		margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
		*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
	}
	
	.offsetFirstChild(@columns) {
		margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
		*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
	}
	
	.span(@columns) {
		margin-bottom: @bottomMargin;
		width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
		*width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
	}
	
	.grid {
		[class*="span"] {
			display: block;
			float: left;
			margin-left: @fluidGridGutterWidth;
			*margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
		}
		[class*="span"]:first-child {
			margin-left: 0;
		}
		
		// generate .spanX and .offsetX
		.spanX(@gridColumns);
		.offsetX(@gridColumns);
	}
}